#pragma once
#include "ShaderInstruction.h"
#include <vector>

enum ShaderOpCodeId 
{
    ShaderOpCodeId_KIL,
    ShaderOpCodeId_SSY,
    ShaderOpCodeId_SYNC,
    ShaderOpCodeId_BRK,
    ShaderOpCodeId_DEPBAR,
    ShaderOpCodeId_VOTE,
    ShaderOpCodeId_VOTE_VTG,
    ShaderOpCodeId_SHFL,
    ShaderOpCodeId_FSWZADD,
    ShaderOpCodeId_BFE_C,
    ShaderOpCodeId_BFE_R,
    ShaderOpCodeId_BFE_IMM,
    ShaderOpCodeId_BFI_RC,
    ShaderOpCodeId_BFI_IMM_R,
    ShaderOpCodeId_BRA,
    ShaderOpCodeId_BRX,
    ShaderOpCodeId_PBK,
    ShaderOpCodeId_LD_A,
    ShaderOpCodeId_LD_L,
    ShaderOpCodeId_LD_S,
    ShaderOpCodeId_LD_C,
    ShaderOpCodeId_LD,
    ShaderOpCodeId_LDG,
    ShaderOpCodeId_ST_A,
    ShaderOpCodeId_ST_L,
    ShaderOpCodeId_ST_S,
    ShaderOpCodeId_ST,
    ShaderOpCodeId_STG,
    ShaderOpCodeId_RED,
    ShaderOpCodeId_ATOM,
    ShaderOpCodeId_ATOMS,
    ShaderOpCodeId_AL2P,
    ShaderOpCodeId_TEX,
    ShaderOpCodeId_TEX_B,
    ShaderOpCodeId_TXQ,
    ShaderOpCodeId_TXQ_B,
    ShaderOpCodeId_TEXS,
    ShaderOpCodeId_TLD,
    ShaderOpCodeId_TLDS,
    ShaderOpCodeId_TLD4,
    ShaderOpCodeId_TLD4_B,
    ShaderOpCodeId_TLD4S,
    ShaderOpCodeId_TMML_B,
    ShaderOpCodeId_TMML,
    ShaderOpCodeId_TXD,
    ShaderOpCodeId_TXD_B,
    ShaderOpCodeId_SUST,
    ShaderOpCodeId_SULD,
    ShaderOpCodeId_SUATOM,
    ShaderOpCodeId_EXIT,
    ShaderOpCodeId_NOP,
    ShaderOpCodeId_IPA,
    ShaderOpCodeId_OUT_R,
    ShaderOpCodeId_ISBERD,
    ShaderOpCodeId_BAR,
    ShaderOpCodeId_MEMBAR,
    ShaderOpCodeId_VMAD,
    ShaderOpCodeId_VSETP,
    ShaderOpCodeId_VMNMX,
    ShaderOpCodeId_FFMA_IMM,
    ShaderOpCodeId_FFMA_CR,
    ShaderOpCodeId_FFMA_RC,
    ShaderOpCodeId_FFMA_RR,
    ShaderOpCodeId_FADD_C,
    ShaderOpCodeId_FADD_R,
    ShaderOpCodeId_FADD_IMM,
    ShaderOpCodeId_FADD32I,
    ShaderOpCodeId_FMUL_C,
    ShaderOpCodeId_FMUL_R,
    ShaderOpCodeId_FMUL_IMM,
    ShaderOpCodeId_FMUL32_IMM,
    ShaderOpCodeId_IADD_C,
    ShaderOpCodeId_IADD_R,
    ShaderOpCodeId_IADD_IMM,
    ShaderOpCodeId_IADD3_C,
    ShaderOpCodeId_IADD3_R,
    ShaderOpCodeId_IADD3_IMM,
    ShaderOpCodeId_IADD32I,
    ShaderOpCodeId_ISCADD_C,
    ShaderOpCodeId_ISCADD_R,
    ShaderOpCodeId_ISCADD_IMM,
    ShaderOpCodeId_FLO_R,
    ShaderOpCodeId_FLO_C,
    ShaderOpCodeId_FLO_IMM,
    ShaderOpCodeId_LEA_R1,
    ShaderOpCodeId_LEA_R2,
    ShaderOpCodeId_LEA_RZ,
    ShaderOpCodeId_LEA_IMM,
    ShaderOpCodeId_LEA_HI,
    ShaderOpCodeId_HADD2_C,
    ShaderOpCodeId_HADD2_R,
    ShaderOpCodeId_HADD2_IMM,
    ShaderOpCodeId_HMUL2_C,
    ShaderOpCodeId_HMUL2_R,
    ShaderOpCodeId_HMUL2_IMM,
    ShaderOpCodeId_HFMA2_CR,
    ShaderOpCodeId_HFMA2_RC,
    ShaderOpCodeId_HFMA2_RR,
    ShaderOpCodeId_HFMA2_IMM_R,
    ShaderOpCodeId_HSETP2_C,
    ShaderOpCodeId_HSETP2_R,
    ShaderOpCodeId_HSETP2_IMM,
    ShaderOpCodeId_HSET2_C,
    ShaderOpCodeId_HSET2_R,
    ShaderOpCodeId_HSET2_IMM,
    ShaderOpCodeId_POPC_C,
    ShaderOpCodeId_POPC_R,
    ShaderOpCodeId_POPC_IMM,
    ShaderOpCodeId_SEL_C,
    ShaderOpCodeId_SEL_R,
    ShaderOpCodeId_SEL_IMM,
    ShaderOpCodeId_ICMP_RC,
    ShaderOpCodeId_ICMP_R,
    ShaderOpCodeId_ICMP_CR,
    ShaderOpCodeId_ICMP_IMM,
    ShaderOpCodeId_FCMP_RR,
    ShaderOpCodeId_FCMP_RC,
    ShaderOpCodeId_FCMP_IMMR,
    ShaderOpCodeId_MUFU,
    ShaderOpCodeId_RRO_C,
    ShaderOpCodeId_RRO_R,
    ShaderOpCodeId_RRO_IMM,
    ShaderOpCodeId_F2F_C,
    ShaderOpCodeId_F2F_R,
    ShaderOpCodeId_F2F_IMM,
    ShaderOpCodeId_F2I_C,
    ShaderOpCodeId_F2I_R,
    ShaderOpCodeId_F2I_IMM,
    ShaderOpCodeId_I2F_C,
    ShaderOpCodeId_I2F_R,
    ShaderOpCodeId_I2F_IMM,
    ShaderOpCodeId_I2I_C,
    ShaderOpCodeId_I2I_R,
    ShaderOpCodeId_I2I_IMM,
    ShaderOpCodeId_LOP_C,
    ShaderOpCodeId_LOP_R,
    ShaderOpCodeId_LOP_IMM,
    ShaderOpCodeId_LOP32I,
    ShaderOpCodeId_LOP3_C,
    ShaderOpCodeId_LOP3_R,
    ShaderOpCodeId_LOP3_IMM,
    ShaderOpCodeId_MOV_C,
    ShaderOpCodeId_MOV_R,
    ShaderOpCodeId_MOV_IMM,
    ShaderOpCodeId_S2R,
    ShaderOpCodeId_MOV32_IMM,
    ShaderOpCodeId_SHL_C,
    ShaderOpCodeId_SHL_R,
    ShaderOpCodeId_SHL_IMM,
    ShaderOpCodeId_SHR_C,
    ShaderOpCodeId_SHR_R,
    ShaderOpCodeId_SHR_IMM,
    ShaderOpCodeId_SHF_RIGHT_R,
    ShaderOpCodeId_SHF_RIGHT_IMM,
    ShaderOpCodeId_SHF_LEFT_R,
    ShaderOpCodeId_SHF_LEFT_IMM,
    ShaderOpCodeId_FMNMX_C,
    ShaderOpCodeId_FMNMX_R,
    ShaderOpCodeId_FMNMX_IMM,
    ShaderOpCodeId_IMNMX_C,
    ShaderOpCodeId_IMNMX_R,
    ShaderOpCodeId_IMNMX_IMM,
    ShaderOpCodeId_FSETP_C,
    ShaderOpCodeId_FSETP_R,
    ShaderOpCodeId_FSETP_IMM,
    ShaderOpCodeId_FSET_C,
    ShaderOpCodeId_FSET_R,
    ShaderOpCodeId_FSET_IMM,
    ShaderOpCodeId_ISETP_C,
    ShaderOpCodeId_ISETP_IMM,
    ShaderOpCodeId_ISETP_R,
    ShaderOpCodeId_ISET_R,
    ShaderOpCodeId_ISET_C,
    ShaderOpCodeId_ISET_IMM,
    ShaderOpCodeId_PSETP,
    ShaderOpCodeId_PSET,
    ShaderOpCodeId_CSETP,
    ShaderOpCodeId_R2P_IMM,
    ShaderOpCodeId_P2R_IMM,
    ShaderOpCodeId_XMAD_IMM,
    ShaderOpCodeId_XMAD_CR,
    ShaderOpCodeId_XMAD_RC,
    ShaderOpCodeId_XMAD_RR,
};

enum ShaderOpCodeType 
{
    ShaderOpCodeType_Trivial,
    ShaderOpCodeType_Arithmetic,
    ShaderOpCodeType_ArithmeticImmediate,
    ShaderOpCodeType_ArithmeticInteger,
    ShaderOpCodeType_ArithmeticIntegerImmediate,
    ShaderOpCodeType_ArithmeticHalf,
    ShaderOpCodeType_ArithmeticHalfImmediate,
    ShaderOpCodeType_Bfe,
    ShaderOpCodeType_Bfi,
    ShaderOpCodeType_Shift,
    ShaderOpCodeType_Ffma,
    ShaderOpCodeType_Hfma2,
    ShaderOpCodeType_Flow,
    ShaderOpCodeType_Synch,
    ShaderOpCodeType_Warp,
    ShaderOpCodeType_Memory,
    ShaderOpCodeType_Texture,
    ShaderOpCodeType_Image,
    ShaderOpCodeType_FloatSet,
    ShaderOpCodeType_FloatSetPredicate,
    ShaderOpCodeType_IntegerSet,
    ShaderOpCodeType_IntegerSetPredicate,
    ShaderOpCodeType_HalfSet,
    ShaderOpCodeType_HalfSetPredicate,
    ShaderOpCodeType_PredicateSetPredicate,
    ShaderOpCodeType_PredicateSetRegister,
    ShaderOpCodeType_RegisterSetPredicate,
    ShaderOpCodeType_Conversion,
    ShaderOpCodeType_Video,
    ShaderOpCodeType_Xmad,
    ShaderOpCodeType_Unknown,
};

class ShaderOpCode 
{
    typedef struct 
    {
        const char * Name;
        uint16_t Mask;
        uint16_t Expected;
        ShaderOpCodeId OpCodeId;
        ShaderOpCodeType Type;
    } Decoder;

public:
    ShaderOpCode(const ShaderInstruction & Instruction);
    
    const char * Name(void) const;
    ShaderOpCodeType Type(void) const;
    ShaderOpCodeId Id(void) const;
    bool Valid(void) const;

    static void CreateDecodeTable(void);

private:
    ShaderOpCode();
    ShaderOpCode(const ShaderOpCode&);
    ShaderOpCode& operator=(const ShaderOpCode&);

    Decoder * m_Decoder;

    static Decoder CreateDecoder(const char * BitString, const char * Name, ShaderOpCodeId OpCodeId, ShaderOpCodeType Type);
    static std::vector<Decoder> m_DecodeTable;
};
